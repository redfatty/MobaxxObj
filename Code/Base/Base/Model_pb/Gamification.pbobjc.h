// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gamification.proto

#import "GPBProtocolBuffers.h"

#if GOOGLE_PROTOBUF_OBJC_GEN_VERSION != 30000
#error This file was generated by a different version of protoc which is incompatible with your Protocol Buffer library sources.
#endif

// @@protoc_insertion_point(imports)

CF_EXTERN_C_BEGIN

NS_ASSUME_NONNULL_BEGIN

#pragma mark - Enum PTaskKey

typedef GPB_ENUM(PTaskKey) {
  PTaskKey_GPBUnrecognizedEnumeratorValue = kGPBUnrecognizedEnumeratorValue,
  // 发帖
  PTaskKey_Publish = 0,

  // 关注用户
  PTaskKey_Follow = 1,

  // 点赞帖子 
  PTaskKey_Vote = 2,

  // 回复帖子
  PTaskKey_Reply = 3,

  // 加入社区
  PTaskKey_Addcommunity = 4,

  // 论坛发帖 
  PTaskKey_Publishcommunity = 5,

  // 加平台好友
  PTaskKey_Addfriend = 6,

  // 转发帖子
  PTaskKey_Forward = 7,

  // 发红包 
  PTaskKey_Redpacket = 8,

  // @人
  PTaskKey_Remind = 9,

  // 资料完善
  PTaskKey_Profile = 10,

  // 开启手机通讯录访问权限
  PTaskKey_Opencontact = 11,

  // 加手机通讯录好友 
  PTaskKey_Addcontact = 12,

  // 意见反馈  
  PTaskKey_Feedback = 13,

  // 绑定第三方账号  
  PTaskKey_Bindaccount = 14,

  // 下载机器人助手
  PTaskKey_Downloadapp = 15,

  // 加第三方方平台好友
  PTaskKey_Addotherfriend = 16,

  // 注册
  PTaskKey_Register = 17,

  // 成为VIP
  PTaskKey_Vip = 18,
};

GPBEnumDescriptor *PTaskKey_EnumDescriptor(void);

BOOL PTaskKey_IsValidValue(int32_t value);

#pragma mark - GamificationRoot

@interface GamificationRoot : GPBRootObject

// The base class provides:
//   + (GPBExtensionRegistry *)extensionRegistry;
// which is an GPBExtensionRegistry that includes all the extensions defined by
// this file and all files that it depends on.

@end

#pragma mark - PGamification

typedef GPB_ENUM(PGamification_FieldNumber) {
  PGamification_FieldNumber_Experience = 1,
  PGamification_FieldNumber_Level = 2,
  PGamification_FieldNumber_TaskArray = 3,
};

@interface PGamification : GPBMessage

// 经验值
@property(nonatomic, readwrite) int32_t experience;

// 等级
@property(nonatomic, readwrite) int32_t level;

// 任务列表
// |taskArray| contains |PTaskDetail|
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray *taskArray;
@property(nonatomic, readonly) NSUInteger taskArray_Count;

@end

#pragma mark - PTaskDetail

typedef GPB_ENUM(PTaskDetail_FieldNumber) {
  PTaskDetail_FieldNumber_Type = 1,
  PTaskDetail_FieldNumber_TaskKey = 2,
  PTaskDetail_FieldNumber_Description_p = 3,
  PTaskDetail_FieldNumber_Progress = 4,
  PTaskDetail_FieldNumber_Statu = 5,
  PTaskDetail_FieldNumber_Target = 6,
  PTaskDetail_FieldNumber_Experience = 7,
};

@interface PTaskDetail : GPBMessage

// 任务类型（1-日常任务，2-主线任务， 3-系统任务）系统任务不可手动接受，主线任务只可接受一次，日常任务每天可接受一次
@property(nonatomic, readwrite) int32_t type;

// 任务ID
@property(nonatomic, readwrite) PTaskKey taskKey;

// 任务描述
@property(nonatomic, readwrite, copy, null_resettable) NSString *description_p;

// 完成进度
@property(nonatomic, readwrite) int32_t progress;

// 任务状态（1-未接受，2-进行中，3-已完成）
@property(nonatomic, readwrite) int32_t statu;

// 任务总数
@property(nonatomic, readwrite) int32_t target;

// 任务完成经验值
@property(nonatomic, readwrite) int32_t experience;

@end

int32_t PTaskDetail_TaskKey_RawValue(PTaskDetail *message);
void SetPTaskDetail_TaskKey_RawValue(PTaskDetail *message, int32_t value);

#pragma mark - PAchievement

typedef GPB_ENUM(PAchievement_FieldNumber) {
  PAchievement_FieldNumber_Experience = 1,
  PAchievement_FieldNumber_Level = 2,
  PAchievement_FieldNumber_NextLevelExperience = 3,
  PAchievement_FieldNumber_UpgradeExperience = 4,
  PAchievement_FieldNumber_BadgeHave = 5,
  PAchievement_FieldNumber_BadgeSum = 6,
  PAchievement_FieldNumber_BadgeArray = 7,
};

@interface PAchievement : GPBMessage

// 经验值
@property(nonatomic, readwrite) int32_t experience;

// 等级
@property(nonatomic, readwrite) int32_t level;

// 下一个等级经验值
@property(nonatomic, readwrite) int32_t nextLevelExperience;

// 距离下一个等级需要的经验值
@property(nonatomic, readwrite) int32_t upgradeExperience;

// 已获得徽章数量
@property(nonatomic, readwrite) int32_t badgeHave;

// 徽章总数
@property(nonatomic, readwrite) int32_t badgeSum;

// 徽章列表
// |badgeArray| contains |PBadgeDetail|
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray *badgeArray;
@property(nonatomic, readonly) NSUInteger badgeArray_Count;

@end

#pragma mark - PBadgeDetail

typedef GPB_ENUM(PBadgeDetail_FieldNumber) {
  PBadgeDetail_FieldNumber_Statu = 1,
  PBadgeDetail_FieldNumber_Name = 2,
  PBadgeDetail_FieldNumber_Icon = 3,
  PBadgeDetail_FieldNumber_Description_p = 4,
  PBadgeDetail_FieldNumber_Progress = 5,
  PBadgeDetail_FieldNumber_Time = 6,
  PBadgeDetail_FieldNumber_Target = 7,
};

@interface PBadgeDetail : GPBMessage

// 获得状态（1-已获得，2-未获得）
@property(nonatomic, readwrite) int32_t statu;

// 徽章名称
@property(nonatomic, readwrite, copy, null_resettable) NSString *name;

// 徽章图标
@property(nonatomic, readwrite, copy, null_resettable) NSString *icon;

// 徽章描述
@property(nonatomic, readwrite, copy, null_resettable) NSString *description_p;

// 进度，格式如：75%
@property(nonatomic, readwrite, copy, null_resettable) NSString *progress;

// 获得时间，statu=1时此值有效
@property(nonatomic, readwrite) int64_t time;

// 任务总数
@property(nonatomic, readwrite) int32_t target;

@end

NS_ASSUME_NONNULL_END

CF_EXTERN_C_END

// @@protoc_insertion_point(global_scope)
